name: Build & Release Binaries

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    name: Build and Upload
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        arch: [amd64]

    env:
      APP_NAME: screen-tester

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Install system deps for macOS
        if: runner.os == 'macos-latest'
        run: |
          brew install pkg-config

      - name: Get Build Info
        id: buildinfo
        run: |
          echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          else
            echo "VERSION=dev" >> $GITHUB_ENV

      - name: Build
        run: |
          OUTPUT_NAME="${APP_NAME}-${{ matrix.os }}-${{ matrix.arch }}-v${VERSION}"
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            OUTPUT_NAME="${OUTPUT_NAME}.exe"
            GOOS=windows GOARCH=amd64 go build -o "$OUTPUT_NAME" -ldflags "-X github.com/keshon/screen-tester/internal/version.BuildDate=${BUILD_DATE} -X github.com/keshon/screen-tester/internal/version.GoVersion=$(go version | awk '{print $3}')" ./cmd/screen-tester/main.go
          else
            go build -o "$OUTPUT_NAME" -ldflags "-X github.com/keshon/screen-tester/internal/version.BuildDate=${BUILD_DATE} -X github.com/keshon/screen-tester/internal/version.GoVersion=$(go version | awk '{print $3}')" ./cmd/screen-tester/main.go
          fi
          echo "OUTPUT_NAME=$OUTPUT_NAME" >> $GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.OUTPUT_NAME }}
          path: ${{ env.OUTPUT_NAME }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./release

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: ./release/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
